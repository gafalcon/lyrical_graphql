package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/gafalcon/lyrical_graphql/configs"
	"github.com/gafalcon/lyrical_graphql/graph/model"
)

var (
	db = configs.ConnectDB()
)

// Song is the resolver for the song field.
func (r *lyricResolver) Song(ctx context.Context, obj *model.Lyric) (*model.Song, error) {
	return db.GetSong(obj.SongID)
}

// AddSong is the resolver for the addSong field.
func (r *mutationResolver) AddSong(ctx context.Context, title string) (*model.Song, error) {
	song, err := db.AddSong(title)
	return song, err
}

// AddLyricToSong is the resolver for the addLyricToSong field.
func (r *mutationResolver) AddLyricToSong(ctx context.Context, songID string, content string) (*model.Song, error) {
	_, err := db.AddLyric(songID, content)
	if err != nil {
		return nil, err
	}
	return db.GetSong(songID)
}

// LikeLyric is the resolver for the likeLyric field.
func (r *mutationResolver) LikeLyric(ctx context.Context, id string) (*model.Lyric, error) {
	return db.LikeLyric(id)
}

// DeleteSong is the resolver for the deleteSong field.
func (r *mutationResolver) DeleteSong(ctx context.Context, id string) (*model.Song, error) {
	song, err := db.GetSong(id)
	if err != nil {
		return nil, err
	}
	_, err = db.DeleteSong(id)
	if err != nil {
		return nil, err
	}
	return song, nil
}

// Songs is the resolver for the songs field.
func (r *queryResolver) Songs(ctx context.Context) ([]*model.Song, error) {
	songs, err := db.GetSongs()
	return songs, err
}

// Song is the resolver for the song field.
func (r *queryResolver) Song(ctx context.Context, id string) (*model.Song, error) {
	return db.GetSong(id)
}

// Lyric is the resolver for the lyric field.
func (r *queryResolver) Lyric(ctx context.Context, id string) (*model.Lyric, error) {
	return db.GetLyric(id)
}

// Lyrics is the resolver for the lyrics field.
func (r *songResolver) Lyrics(ctx context.Context, obj *model.Song) ([]*model.Lyric, error) {
	lyrics, err := db.GetSongLyrics(obj.ID)
	return lyrics, err
}

// Lyric returns LyricResolver implementation.
func (r *Resolver) Lyric() LyricResolver { return &lyricResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Song returns SongResolver implementation.
func (r *Resolver) Song() SongResolver { return &songResolver{r} }

type lyricResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type songResolver struct{ *Resolver }
